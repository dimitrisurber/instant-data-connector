# Docker Compose for Production Environment
# PostgreSQL FDW-based Data Connector Production Stack
version: '3.8'

services:
  # Production PostgreSQL database with FDW extensions
  postgres-fdw:
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
    container_name: postgres-fdw-prod
    hostname: postgres-fdw
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/var/lib/postgresql/backups
      - postgres_logs:/var/lib/postgresql/data/pg_log
      - ./docker/postgres/ssl:/var/lib/postgresql/ssl:ro
    networks:
      - connector-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.docker.compose.service=postgres-fdw"
      - "backup.enable=true"
      - "backup.schedule=0 2 * * *"

  # PostgreSQL replica for read queries
  postgres-replica:
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
    container_name: postgres-replica-prod
    hostname: postgres-replica
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MASTER_HOST: postgres-fdw
      POSTGRES_MASTER_PORT: 5432
      POSTGRES_REPLICA_USER: ${POSTGRES_REPLICA_USER}
      POSTGRES_REPLICA_PASSWORD: ${POSTGRES_REPLICA_PASSWORD}
      PGUSER: ${POSTGRES_USER}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - postgres_replica_logs:/var/lib/postgresql/data/pg_log
      - ./docker/postgres/replica-setup.sh:/docker-entrypoint-initdb.d/replica-setup.sh
    networks:
      - connector-network
    depends_on:
      postgres-fdw:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Data Connector Application (Production)
  connector-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
        VCS_REF: ${VCS_REF}
    image: instant-data-connector:${VERSION:-latest}
    container_name: connector-app-prod
    hostname: connector-app
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app/src
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-fdw:5432/${POSTGRES_DB}
      - DATABASE_READ_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-replica:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
    volumes:
      - connector_logs:/app/logs
      - connector_data:/app/data
      - connector_cache:/app/cache
      - ./configs/production:/app/configs/production:ro
    networks:
      - connector-network
    depends_on:
      postgres-fdw:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
      - apparmor:unconfined
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/tmp:noexec,nosuid,size=200m
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 30s
        failure_action: pause
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: instant-data-connector:${VERSION:-latest}
    container_name: celery-worker-prod
    hostname: celery-worker
    environment:
      - PYTHONPATH=/app/src
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-fdw:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - connector_logs:/app/logs
      - connector_data:/app/data
      - connector_cache:/app/cache
    networks:
      - connector-network
    depends_on:
      - postgres-fdw
      - redis
    command: ["celery", "-A", "src.instant_connector.celery_app", "worker", "-l", "INFO", "--concurrency=4"]
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "celery", "-A", "src.instant_connector.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: instant-data-connector:${VERSION:-latest}
    container_name: celery-beat-prod
    hostname: celery-beat
    environment:
      - PYTHONPATH=/app/src
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-fdw:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - connector_logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - connector-network
    depends_on:
      - postgres-fdw
      - redis
    command: ["celery", "-A", "src.instant_connector.celery_app", "beat", "-l", "INFO", "--pidfile=/tmp/celerybeat.pid"]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Redis Cluster for high availability
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    hostname: redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - connector-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}

  # NGINX reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    hostname: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - connector-network
    depends_on:
      - connector-app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    hostname: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
    networks:
      - connector-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    hostname: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM_ADDRESS}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - connector-network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # AlertManager for alert routing
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager-prod
    hostname: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - connector-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 32M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'

  # Log aggregation with Fluentd
  fluentd:
    build:
      context: ./docker/fluentd
      dockerfile: Dockerfile
    container_name: fluentd-prod
    hostname: fluentd
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./docker/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - fluentd_logs:/var/log/fluentd
    networks:
      - connector-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Backup service
  backup:
    build:
      context: ./docker/backup
      dockerfile: Dockerfile
    container_name: backup-prod
    hostname: backup
    environment:
      - POSTGRES_HOST=postgres-fdw
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BACKUP_SCHEDULE=0 2 * * *
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - connector-network
    depends_on:
      - postgres-fdw
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

# Network configuration
networks:
  connector-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: connector-br0
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# Volume configuration
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres
  postgres_replica_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres-replica
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /backups/postgres
  postgres_logs:
    driver: local
  postgres_replica_logs:
    driver: local
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/redis
  connector_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /logs/connector
  connector_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/connector
  connector_cache:
    driver: local
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/grafana
  alertmanager_data:
    driver: local
  nginx_logs:
    driver: local
  fluentd_logs:
    driver: local