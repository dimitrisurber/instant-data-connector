apiVersion: v1
kind: ConfigMap
metadata:
  name: connector-config
  namespace: instant-connector
  labels:
    app: instant-data-connector
    component: config
data:
  # Application configuration
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  PYTHONPATH: "/app/src"
  
  # Database configuration
  DATABASE_HOST: "postgres-fdw-service"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "instant_connector"
  DATABASE_READ_HOST: "postgres-replica-service"
  
  # Redis configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  
  # Celery configuration
  CELERY_BROKER_URL: "redis://redis-service:6379/0"
  CELERY_RESULT_BACKEND: "redis://redis-service:6379/1"
  
  # Health check configuration
  HEALTH_ENDPOINT: "http://localhost:8000/health"
  TIMEOUT: "10"
  MAX_RETRIES: "3"
  RETRY_DELAY: "2"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: instant-connector
  labels:
    app: postgres-fdw
    component: config
data:
  POSTGRES_DB: "instant_connector"
  POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
  PGDATA: "/var/lib/postgresql/data/pgdata"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: instant-connector
  labels:
    app: redis
    component: config
data:
  redis.conf: |
    # Redis production configuration
    bind 0.0.0.0
    port 6379
    
    # Security
    protected-mode yes
    
    # Memory management
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    
    # Logging
    loglevel notice
    
    # Performance
    tcp-keepalive 300
    timeout 0
    
    # Replication
    replica-serve-stale-data yes
    replica-read-only yes

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: instant-connector
  labels:
    app: nginx
    component: config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log main;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100M;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1000;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css text/xml text/javascript
                   application/json application/javascript application/xml+rss
                   application/atom+xml image/svg+xml;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
        
        # Upstream servers
        upstream connector_app {
            least_conn;
            server connector-app-service:8000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        server {
            listen 80;
            server_name _;
            
            # Health check endpoint
            location /nginx-health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # API endpoints
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                
                proxy_pass http://connector_app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                proxy_connect_timeout 30s;
                proxy_send_timeout 300s;
                proxy_read_timeout 300s;
                
                proxy_buffering on;
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
            }
            
            # Health check endpoint
            location /health {
                proxy_pass http://connector_app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                access_log off;
            }
            
            # Static files (if any)
            location /static/ {
                alias /var/www/static/;
                expires 1d;
                add_header Cache-Control "public, immutable";
            }
            
            # Default location
            location / {
                proxy_pass http://connector_app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }